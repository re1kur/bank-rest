openapi: 3.1.0
info:
  title: BANK-REST
  description: JWT Access Token authentication. First login and you will receive token pair.
  contact:
    name: Egor Gunter
    url: zerrrox05@mail.ru
    email: mail.com
  license:
    name: License of API
    url: API license URL
  version: "1.0"
servers:
  - url: http://localhost:8081
    description: Generated server url
security:
  - Bearer Authentication: []
paths:
  /api/v1/users/{id}:
    get:
      tags: [users-controller]
      operationId: readUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object
    put:
      tags: [users-controller]
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdatePayload"
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object
    delete:
      tags: [users-controller]
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object

  /api/v1/roles/{id}:
    get:
      tags: [roles-controller]
      operationId: readRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object
    put:
      tags: [roles-controller]
      operationId: updateRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleUpdatePayload"
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object
    delete:
      tags: [roles-controller]
      operationId: deleteRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object

  /api/v1/users:
    get:
      tags: [users-controller]
      operationId: getRoles
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            format: int32
            default: 5
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object
    post:
      tags: [users-controller]
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPayload"
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object

  /api/v1/roles:
    get:
      tags: [roles-controller]
      operationId: getRoles_1
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            format: int32
            default: 5
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object
    post:
      tags: [roles-controller]
      operationId: createRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RolePayload"
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object

  /api/v1/auth/register:
    post:
      tags: [authentication-controller]
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object

  /api/v1/auth/refresh:
    post:
      tags: [authentication-controller]
      operationId: refreshAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenPayload"
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object

  /api/v1/auth/logout:
    post:
      tags: [authentication-controller]
      operationId: logoutUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenPayload"
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object

  /api/v1/auth/login:
    post:
      tags: [authentication-controller]
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object

  /api/v1/profile:
    get:
      tags: [profile-controller]
      operationId: getProfile
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object

  /api/v1/auth/.well-known/jwks:
    get:
      tags: [authentication-controller]
      operationId: jwksEndpoint
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object

components:
  schemas:
    UserUpdatePayload:
      type: object
      required: [roleIds, username]
      properties:
        username:
          type: string
          minLength: 6
          maxLength: 256
        roleIds:
          type: array
          minItems: 1
          items:
            type: integer
            format: int32
    RoleUpdatePayload:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 32
    UserPayload:
      type: object
      required: [password, username]
      properties:
        username:
          type: string
          minLength: 6
          maxLength: 256
        password:
          type: string
          minLength: 1
        roleIds:
          type: array
          items:
            type: integer
            format: int32
    RolePayload:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 32
    RegisterRequest:
      type: object
      required: [password, username]
      properties:
        username:
          type: string
          minLength: 6
          maxLength: 256
        password:
          type: string
          minLength: 1
    RefreshTokenPayload:
      type: object
      required: [value]
      properties:
        value:
          type: string
    LoginRequest:
      type: object
      required: [password, username]
      properties:
        username:
          type: string
        password:
          type: string

  securitySchemes:
    Bearer Authentication:
      type: http
      scheme: bearer
      bearerFormat: JWT
